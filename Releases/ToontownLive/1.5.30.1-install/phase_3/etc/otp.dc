from direct.distributed import DistributedObject/AI/UD
from direct.distributed import DistributedNode/AI/UD
from direct.distributed import DistributedSmoothNode/AI
from direct.distributed import DistributedCartesianGrid/AI
from otp.distributed import Account/AI/UD
from otp.ai import TimeManager/AI
from otp.ai import MagicWordManager/AI
from otp.avatar import DistributedAvatar/AI/UD
from otp.avatar import DistributedPlayer/AI
from otp.friends import FriendManager/AI
from otp.friends import AvatarFriendsManager/UD
from otp.friends import PlayerFriendsManager/UD
from otp.friends import GuildManager/AI/UD
from otp.friends import FriendInfo
from otp.distributed import ObjectServer/AI/UD
from otp.distributed import DistributedDistrict/AI/UD
from otp.distributed import DistributedDirectory/AI
from otp.distributed import DistributedTestObject/AI
from otp.uberdog import OtpAvatarManager/AI/UD
from otp.uberdog import DistributedChatManager/AI/UD

typedef uint8 bool;

struct AvatarPendingDel {
  uint32 Avatar;
  uint32 date;
};

dclass Account {
  string DcObjectType db;
  uint32array ACCOUNT_AV_SET required db;
  uint32array pirateAvatars required db;
  uint32array HOUSE_ID_SET db;
  uint32 ESTATE_ID db;
  AvatarPendingDel ACCOUNT_AV_SET_DEL[] db;
  string PLAYED_MINUTES db;
  string PLAYED_MINUTES_PERIOD db;
  string CREATED db;
  string LAST_LOGIN db;
};

struct BarrierData {
  uint16 context;
  string name;
  uint32 avIds[];
};

dclass DistributedObject {
  setBarrierData(BarrierData []) broadcast ram;
  setBarrierReady(uint16) airecv clsend;
};

dclass DistributedTestObject : DistributedObject {
  uint32 AutoInterest[];
  setParentingRules(string, string) broadcast ram;
  setRequiredField(uint32) required broadcast ram;
  setB(uint32) broadcast;
  setBA(uint32) broadcast airecv;
  setBO(uint32) broadcast ownsend;
  setBR(uint32) broadcast ram;
  setBRA(uint32) broadcast ram airecv;
  setBRO(uint32) broadcast ram ownsend;
  setBROA(uint32) broadcast ram ownsend airecv;
};

dclass TimeManager : DistributedObject {
  requestServerTime(uint8) airecv clsend;
  serverTime(uint8, int32, uint32);
  setDisconnectReason(uint8) airecv clsend;
  setExceptionInfo(string) airecv clsend;
  setSignature(string, char [16], char [16]) airecv clsend;
};

dclass ObjectServer {
  setName(string) airecv ram required;
  setDcHash(uint32) ram required;
  setDateCreated(uint32) airecv;
};

dclass DistributedDirectory : DistributedObject {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedDistrict : DistributedObject {
  setName(string) broadcast required;
  setAvailable(uint8) broadcast required;
};

dclass DistributedNode : DistributedObject {
  setParentStr(blob) broadcast ram ownsend airecv;
  setParent(uint32) broadcast ram ownsend airecv;
  setX(int16/10) broadcast ram ownsend airecv;
  setY(int16/10) broadcast ram ownsend airecv;
  setZ(int16/10) broadcast ram ownsend airecv;
  setH(int16%360/10) broadcast ram ownsend airecv;
  setP(int16%360/10) broadcast ram ownsend airecv;
  setR(int16%360/10) broadcast ram ownsend airecv;
  setPos : setX, setY, setZ;
  setHpr : setH, setP, setR;
  setPosHpr : setX, setY, setZ, setH, setP, setR;
  setXY : setX, setY;
  setXZ : setX, setZ;
  setXYH : setX, setY, setH;
  setXYZH : setX, setY, setZ, setH;
};

dclass DistributedSmoothNode : DistributedNode {
  setComponentX(int16/10) broadcast ram clsend airecv;
  setComponentY(int16/10) broadcast ram clsend airecv;
  setComponentZ(int16/10) broadcast ram clsend airecv;
  setComponentH(int16%360/10) broadcast ram clsend airecv;
  setComponentP(int16%360/10) broadcast ram clsend airecv;
  setComponentR(int16%360/10) broadcast ram clsend airecv;
  setComponentT(int16) broadcast ram clsend airecv;
  setSmStop : setComponentT;
  setSmH : setComponentH, setComponentT;
  setSmZ : setComponentZ, setComponentT;
  setSmXY : setComponentX, setComponentY, setComponentT;
  setSmXZ : setComponentX, setComponentZ, setComponentT;
  setSmPos : setComponentX, setComponentY, setComponentZ, setComponentT;
  setSmHpr : setComponentH, setComponentP, setComponentR, setComponentT;
  setSmXYH : setComponentX, setComponentY, setComponentH, setComponentT;
  setSmXYZH : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentT;
  setSmPosHpr : setComponentX, setComponentY, setComponentZ, setComponentH, setComponentP, setComponentR, setComponentT;
  clearSmoothing(int8) broadcast clsend;
  suggestResync(uint32, int16, int16, int32, uint16, uint16/100) airecv clsend;
  returnResync(uint32, int16, int32, uint16, uint16/100) airecv clsend;
};

dclass DistributedCartesianGrid : DistributedNode {
  setParentingRules(string, string) broadcast ram;
};

dclass DistributedAvatar : DistributedSmoothNode {
  string DcObjectType db;
  setName(string) required broadcast db;
  friendsNotify(int32, int8) ownrecv airecv clsend;
};

dclass DistributedPlayer : DistributedAvatar {
  arrivedOnDistrict(uint32) ownrecv ram;
  setAccountName(string) required ownrecv db;
  setChat(string, uint8) broadcast ownsend;
  setWhisperFrom(uint32, string) ownrecv clsend;
  setWhisperSCFrom(uint32, uint16) ownrecv clsend;
  setWhisperSCCustomFrom(uint32, uint16) ownrecv clsend;
  setWhisperSCEmoteFrom(uint32, uint16) ownrecv clsend;
  setWhisperIgnored(uint32) airecv clsend;
  setSystemMessage(uint32, string) ownrecv;
  setCommonChatFlags(uint8) broadcast ownrecv ram;
  setSC(uint16) broadcast ownsend airecv;
  setSCCustom(uint16) broadcast ownsend airecv;
  setFriendsList(uint32uint8array) ownrecv required db airecv;
  OwningAccount(uint32);
  WishName(string) db ram;
  WishNameState(string) db ram;
};

dclass MagicWordManager : DistributedObject {
  setMagicWord(string, uint32, uint32, string) airecv clsend;
  setMagicWordResponse(string) airecv;
  setWho(uint32array) airecv clsend;
};

dclass OtpAvatarManager : DistributedObject {
  online();
  requestAvatarList() airecv clsend;
  rejectAvatarList(uint32);
  avatarListResponse(blob);
  requestAvatarSlot(uint8) clsend airecv;
  rejectAvatarSlot(uint32, uint8);
  avatarSlotResponse(uint8);
  requestPlayAvatar(uint32) clsend airecv;
  rejectPlayAvatar(uint32, uint32);
  playAvatarResponse(uint32);
  rejectCreateAvatar(uint32);
  createAvatarResponse(uint32);
  requestRemoveAvatar(uint32, string) airecv clsend;
  rejectRemoveAvatar(uint32);
  removeAvatarResponse(uint32);
  requestShareAvatar(uint32, uint8) airecv clsend;
  rejectShareAvatar(uint32);
  shareAvatarResponse(uint32, uint8);
  requestAvatarName(string) clsend;
};

dclass DistributedChatManager : DistributedObject {
  online();
  adminChat(uint32, string);
  setAvatarLocation(uint32, uint32, uint32);
  setAvatarCrew(uint32, uint32);
  setAvatarGuild(uint32, uint32);
  chatParentId(uint32) airecv clsend;
  chatZoneId(uint32) airecv clsend;
  chatFace(uint32) airecv clsend;
  chatEmote(uint16) airecv clsend;
  chatEmoteTarget(uint32) airecv clsend;
  chatIndex(uint16) airecv clsend;
  chatString(string) airecv clsend;
  chatToAvatarIndex : chatZoneId, chatIndex;
  chatParentZoneFaceEmoteWithTargetIndex : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatIndex;
  chatToAvatarString : chatZoneId, chatString;
  chatParentZoneFaceEmoteWithTargetString : chatParentId, chatZoneId, chatFace, chatEmote, chatEmoteTarget, chatString;
  chatTo(string, uint8) airecv clsend;
  chatFrom(uint32, string, uint8);
  speedChatTo(uint16) airecv clsend;
  speedChatFrom(uint32, uint16);
  speedChatCustomTo(uint16) airecv clsend;
  speedChatCustomFrom(uint32, uint16);
  whisperTo(uint32, string) airecv clsend;
  whisperFrom(uint32, string);
  whisperSCTo(uint32, uint16) airecv clsend;
  whisperSCFrom(uint32, uint16);
  whisperSCCustomTo(uint32, uint16) airecv clsend;
  whisperSCCustomFrom(uint32, uint16);
  whisperSCEmoteTo(uint32, uint16) airecv clsend;
  whisperSCEmoteFrom(uint32, uint16);
  whisperIgnored(uint32);
  crewChatTo(string) airecv clsend;
  crewChatFrom(uint32, string);
  guildChatTo(string) airecv clsend;
  guildChatFrom(uint32, string);
};

dclass FriendManager : DistributedObject {
  friendQuery(int32) airecv clsend;
  cancelFriendQuery(int32) airecv clsend;
  inviteeFriendConsidering(int8, int32) airecv clsend;
  inviteeFriendResponse(int8, int32) airecv clsend;
  inviteeAcknowledgeCancel(int32) airecv clsend;
  friendConsidering(int8, int32);
  friendResponse(int8, int32);
  inviteeFriendQuery(int32, string, blob, int32);
  inviteeCancelFriendQuery(int32);
  requestSecret() airecv clsend;
  requestSecretResponse(int8, string);
  submitSecret(string) airecv clsend;
  submitSecretResponse(int8, int32);
};

struct FriendInfo {
  string avatarName;
  uint32 avatarId;
  string playerName;
  uint8 onlineYesNo;
  uint8 openChatEnabledYesNo;
  uint8 openChatFriendshipYesNo;
  uint8 understandableYesNo;
  string location;
  string sublocation;
  uint32 timestamp;
};

struct MemberInfo {
  uint32 avatarId;
  string avatarName;
  uint8 avatarRank;
  uint8 avatarOnline;
};

struct leaderBoardRecordResponces {
  char found;
  uint32 id;
  string text;
  int32 value;
};

struct leaderBoardRecord {
  uint32 id;
  string text;
  int32 value;
};

dclass LeaderBoardReceiver {
  getTopTenResponce(string, leaderBoardRecord []);
  getValuesResponce(string, leaderBoardRecordResponces []);
};

dclass LeaderBoard : LeaderBoardReceiver {
  setValue(string [], uint32, string, int32);
  alterValue(string [], uint32, string, int32);
  setHighScore(string [], uint32, string, int32);
  getValues(string, uint32 []);
  getTopTen(string);
  getValuesRespondTo(string, uint32 [], uint32);
  getTopTenRespondTo(string, uint32);
};

dclass GuildManager : DistributedObject, LeaderBoardReceiver {
  online();
  guildRejectInvite(uint32, uint32);
  invitationFrom(uint32, string, uint32, string);
  requestInvite(uint32, string) airecv clsend;
  memberList(uint32, uint32) airecv clsend;
  createGuild(uint32) airecv clsend;
  acceptInvite(uint32, uint32, uint32) airecv clsend;
  declineInvite(uint32, uint32, uint32) airecv clsend;
  addMember(uint32, uint32) airecv clsend;
  setWantName(uint32, string, uint32) airecv clsend;
  removeMember(uint32) airecv clsend;
  changeRank(uint32, uint8) airecv clsend;
  statusRequest(uint32) airecv clsend;
  requestLeaderboardTopTen(uint32) airecv clsend;
  guildStatusUpdate(uint32, string, uint8);
  receiveMembers(MemberInfo []);
  guildAcceptInvite(uint32);
  guildDeclineInvite(uint32);
  avatarOnline(uint32);
  avatarOffline(uint32, uint32);
  getValuesResponce(string, leaderBoardRecordResponces []);
  getTopTenResponce(string, leaderBoardRecord []);
  leaderboardTopTen(leaderBoardRecord []);
};

dclass AvatarFriendsManager : DistributedObject {
  online();
  requestInvite(uint32) airecv clsend;
  invitationFrom(uint32, string);
  retractInvite(uint32);
  rejectInvite(uint32, uint32);
  requestRemove(uint32) airecv clsend;
  rejectRemove(uint32, uint32);
  addAvatarFriend(uint32, FriendInfo);
  updateAvatarFriend(uint32, FriendInfo);
  removeAvatarFriend(uint32);
};

dclass PlayerFriendsManager : DistributedObject {
  online();
  requestInvite(uint32, uint32) airecv clsend;
  invitationFrom(uint32, string);
  retractInvite(uint32);
  rejectInvite(uint32, uint32);
  requestDecline(uint32, uint32) airecv clsend;
  requestRemove(uint32, uint32) airecv clsend;
  rejectRemove(uint32, uint32);
  requestUnlimitedSecret(uint32) airecv clsend;
  requestLimitedSecret(uint32, string, string) airecv clsend;
  secretResponse(string);
  rejectSecret(uint32);
  requestUseUnlimitedSecret(uint32, string) airecv clsend;
  requestUseLimitedSecret(uint32, string, string, string) airecv clsend;
  rejectUseSecret(uint32);
  whisperTo(uint32, uint32, string) airecv clsend;
  whisperSCTo(uint32, uint32, uint32) airecv clsend;
  whisperSCCustomTo(uint32, uint32, uint32) airecv clsend;
  whisperSCEmoteTo(uint32, uint32, uint32) airecv clsend;
  whisperFrom(uint32, string);
  updatePlayerFriend(uint32, FriendInfo);
  removePlayerFriend(uint32);
};

